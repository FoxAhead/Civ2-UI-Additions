// This file is generated automatically. Do not change it.
AdvisorWindow_CopyBg: procedure(This: PAdvisorWindow; XSrc, YSrc, Width, Height: Integer); stdcall;
AfterActiveUnitChanged: procedure(A1: Integer); cdecl;
ArrangeWindows: procedure; cdecl;
BmpFillColor: procedure(PBmp: PByte; Color, Left, Top: Integer; W: Cardinal; H, BmWidth4u, Height: Integer); cdecl;
CDRootFind: function(FileName: PChar): PChar; cdecl;
CalcCityGlobals: procedure(CityIndex: Integer; Calc: Boolean); cdecl;
CalcCityGlobalsTileRes: procedure(CityIndex, SpiralIndex, AddTotal: Integer); cdecl;
CheckPaths: function(CheckFileName: PChar): Integer; cdecl;
CityCitizenClicked: procedure(CitizenIndex: Integer); cdecl;
CityHasImprovement: function(CityIndex, Improvement: Integer): Boolean; cdecl;
CitySprites_GetInfoOfClickedCitySprite: function(This: PCitySprites; X, Y: Integer; var SIndex, SType: Integer): Integer; stdcall;
CityWindowExit: procedure; cdecl;
CityWindow_DrawBuilding: procedure(This: PCityWindow; CopyToScreen: Boolean); stdcall;
CityWindow_DrawResources: procedure(This: PCityWindow; CopyToScreen: Boolean); stdcall;
CityWindow_DrawSupport: procedure(This: PCityWindow; CopyToScreen: Boolean); stdcall;
CityWindow_ScaleWithSize: function(This: PCityWindow; Value: Integer): Integer; stdcall;
CityWindow_Show: procedure(This: PCityWindow; CityIndex: Integer); stdcall;
CityWindow_Update: procedure(This: PCityWindow; A2: Integer); stdcall;
CityWndProcClose: function: Integer; cdecl;
CitywinCityButtonChange: procedure(A1: Integer); cdecl;
CivHasTech: function(CivIndex, Tech: Integer): Boolean; cdecl;
Clamp: function(A1, Min, Max: Integer): Integer; cdecl;
ClearPopupActive: procedure; cdecl;
ControlInfo_ShowWindowInvalidateRect: procedure(This: PControlInfo); stdcall;
CopyBmp: procedure(PSrcBmp, PDstBmp: Pointer; SrcX, SrcY, DstX, DstY, DstW, DstH, SrcRectHeight, DstRectHeight, SrcWidth4, SrcHeight4: Integer); cdecl;
CopySpriteBmp: procedure(Source, Target, A3: Pointer; Color: Byte; A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16: Integer); cdecl;
CopyToPort: procedure(Src, Dst: PDrawPort; XSrc, YSrc, XDst, YDst, Width, Height: Integer); cdecl;
Crt_OperatorDelete: procedure(Ptr: Pointer); cdecl;
Crt_OperatorNew: function(Count: Cardinal): Pointer; cdecl;
Distance: function(X1, Y1, X2, Y2: Integer): Integer; cdecl;
DlgParams_SetNumber: procedure(Index, Number: Integer); cdecl;
DlgParams_SetString: procedure(Index, ListIndex: Integer); cdecl;
DlgParams_SetStringText: function(Index: Integer; Text: PChar): PChar; cdecl;
Dlg_AddListboxItem: function(This: PDialogWindow; Text: PChar; Index, A4: Integer): PListboxItem; stdcall;
Dlg_CleanupHeap: function(This: PDialogWindow): PHeap; stdcall;
Dlg_CreateAndWait: function(This: PDialogWindow; Timeout: Integer): Integer; stdcall;
Dlg_CreateDialog: procedure(This: PDialogWindow); stdcall;
Dlg_DrawListboxItemTextPart: procedure(This: PDialogWindow; Text: PChar; XLeft, YTop, Selected, Disabled: Integer); stdcall;
Dlg_DrawTextLine: function(This: PDialogWindow; Text: PChar; XLeft, YTop, A5: Integer): Integer; stdcall;
Dlg_InitWithHeap: function(This: PDialogWindow; HeapAllocSize: Word): PDialogWindow; stdcall;
Dlg_LoadGAMESimpleL0: function(This: PDialogWindow; SectionName: PChar; Flags: Integer): Integer; stdcall;
Dlg_LoadGAMESimpleL0F0: function(This: PDialogWindow; SectionName: PChar): Integer; stdcall;
Dlg_LoadPopup: function(This: PDialogWindow; FileName, SectionName: PChar; Length: Integer; Text: PChar; A6: PGraphicsInfo; A3: PDrawPort; Rect: PRect; Flags: Integer): Integer; stdcall;
Dlg_LoadSimple: function(This: PDialogWindow; FileName, SectionName: PChar; Length, Flags: Integer): Integer; stdcall;
Dlg_Setup: procedure(This: PDialogWindow; Flags: Integer); stdcall;
DrawCitySprite: procedure(DrawPort: PDrawPort; CityIndex, Options, XLeft, YTop, Zoom: Integer); cdecl;
DrawFrame: procedure(DrawPort: PDrawPort; Rect: PRect; Color: Integer); cdecl;
DrawPort_BmpAttach: procedure(This: PDrawPort); stdcall;
DrawPort_BmpDetach: procedure(This: PDrawPort); stdcall;
DrawPort_GetPixel: function(This: PDrawPort; X, Y: Integer): Integer; stdcall;
DrawPort_GetPixelAddress: function(This: PDrawPort; X, Y: Integer): PByte; stdcall;
DrawPort_Init: function(This: PDrawPort): PDrawPort; stdcall;
DrawPort_LoadResGIFS: function(This: PDrawPort; ResName: PChar; A3: UINT; A4: Cardinal; Pal: PPalette): Integer; stdcall;
DrawPort_Locked: function(This: PDrawPort): Boolean; stdcall;
DrawPort_ResetWH: function(This: PDrawPort; Width, Height: Integer): Integer; stdcall;
DrawPort_UpdateDIBColorTableFromPaletteSafe: procedure(This: PDrawPort; Palette: PPalette); stdcall;
DrawStringCurrDrawPort2: function(Text: PChar; XLeft, YTop: Integer): Integer; cdecl;
DrawStringRightCurrDrawPort2: function(Text: PChar; XRight, YTop, OffsetX: Integer): Integer; cdecl;
DrawUnit: procedure(DrawPort: PDrawPort; UnitIndex, Flags, Left, Top, Zoom, WithoutFortress: Integer); cdecl;
ExtractSprite64x48: procedure(Sprite: PSprite; XLeft, YTop: Integer); cdecl;
FindNearestCity: function(X, Y, Civ1, MassIndex, Civ2: Integer): Cardinal; cdecl;
FontInfo_GetHeightWithExLeading: function(This: PFontInfo): Integer; stdcall;
FontInfo_GetTextExtentX: function(This: PFontInfo; Text: PChar): Integer; stdcall;
FontInfo_Recreate: procedure(This: PFontInfo; FontFaceNum, Height: Integer; Style: Byte); stdcall;
FontPrepare: procedure(Zoom: Integer); cdecl;
GetAdvanceCost: function(CivIndex: Integer): Integer; cdecl;
GetCityIndexAtXY: function(X, Y: Integer): Integer; cdecl;
GetCivColor1: function(CivIndex: Integer): Integer; cdecl;
GetNationAdjectiveText: function(CivIndex: Integer): PChar; cdecl;
GetNextUnitInStack: function(UnitIndex: Integer): Integer; cdecl;
GetResourceInCityTile: function(CityIndex, SpiralIndex, ResIndex: Integer): Integer; cdecl;
GetSpecialist: function(CityIndex, SpecialistIndex: Integer): Integer; cdecl;
GetSpriteRatios: procedure(var Numerator, Denominator: Integer); cdecl;
GetStringInList: function(StringIndex: Integer): PChar; cdecl;
GetTopUnitInStack: function(UnitIndex: Integer): Integer; cdecl;
GetUpkeep: function(CivIndex, Improvement: Integer): Integer; cdecl;
GraphicsInfo_BuildWindowC: procedure(This: PGraphicsInfo; WindowName: PChar; Style, X, Y, Width, Height: Integer; Pal: PPalette; Parent: PWindowInfo1); stdcall;
GraphicsInfo_BuildWindowCCD2: procedure(This: PGraphicsInfo; WindowName: PChar; Style, X, Y, Width, Height: Integer; Parent: PWindowInfo1); stdcall;
GraphicsInfo_CopyToScreenAndValidateW: procedure(This: PGraphicsInfo); stdcall;
Heap_Add: function(Heap: PHeap; Size: Word): Pointer; cdecl;
HumanTurn: procedure; cdecl;
InitNewGameParameters: procedure; cdecl;
IsInMapBounds: function(X, Y: Integer): Boolean; cdecl;
ListItemProcLButtonUp: procedure(Code: Integer); cdecl;
MSInitGraf: function(Rect: PRect): PDrawInfo; cdecl;
MapGetCivData: function(X, Y, CivIndex: Integer): PByte; cdecl;
MapGetMassIndex: function(X, Y: Integer): Integer; cdecl;
MapGetOwnership: function(X, Y: Integer): Integer; cdecl;
MapGetSquare: function(X, Y: Integer): PMapSquare; cdecl;
MapGetSquareCityRadii: function(X, Y: Integer): Integer; cdecl;
MapSquareIsVisibleTo: function(X, Y, CivIndex: Integer): Boolean; cdecl;
MapTerrainIsOcean: function(X, Y: Integer): Boolean; cdecl;
MapUpdateKnownTerrainFeatures: procedure(X, Y, CivIndex: Integer); cdecl;
MapWindow_CenterView: procedure(This: PMapWindow; X, Y: Integer); stdcall;
MapWindow_MapToWindow: procedure(This: PMapWindow; var WindowX, WindowY: Integer; MapX, MapY: Integer); stdcall;
MapWindow_RedrawMap: procedure(This: PMapWindow; CivIndex: Integer; CopyToScreen: Boolean); stdcall;
MapWindow_ScreenToMap: function(This: PMapWindow; var MapX, MapY: Integer; ScreenX, ScreenY: Smallint): Boolean; stdcall;
MapWrapX: function(X: Integer): Integer; cdecl;
MciCdAudioClose: procedure; cdecl;
MciGetNumberOfTracks: function: Integer; cdecl;
MciNotifyCdAudio: function: Integer; cdecl;
MciNotifySequencer: function: Integer; cdecl;
MenuBar_AddMenu: function(This: PMenuBar; Num: Integer; Text: PChar): PMenu; stdcall;
MenuBar_AddSubMenu: function(This: PMenuBar; Num, SubNum: Integer; Text: PChar; Len: Integer): PMenu; stdcall;
MenuBar_CreateMenu: procedure(This: PMenuBar; A2: PWindowInfo1); stdcall;
MenuBar_EnableSubMenu: procedure(This: PMenuBar; Num: Integer; Hide: Boolean); stdcall;
MenuBar_GetSubMenu: function(This: PMenuBar; Num: Integer): PMenu; stdcall;
MenuBar_ModifyMenuText: procedure(This: PMenuBar; Num: Integer; Text: PChar); stdcall;
NextLinePixelAddress: function(This: PDrawPort; A2: PByte): PByte; stdcall;
OutputDebugSmedsLogI: function(A1: PChar; A2: Integer): char; cdecl;
PFFindConnection: function(CivIndex, X1, Y1, X2, Y2: Integer): Integer; cdecl;
PFFindUnitDir: function(UnitIndex: Integer): Integer; cdecl;
PFMove: function(X, Y, A3: Integer): Integer; cdecl;
Palette_Create: function(This: PPalette): PPalette; stdcall;
Palette_Dispose: procedure(This: PPalette); stdcall;
Palette_GetRGB: procedure(This: PPalette; I: Integer; var R, G, B: Byte); stdcall;
Palette_SetRandomID: procedure(This: PPalette); stdcall;
PickUpUnit: procedure(UnitIndex, Send: Integer); cdecl;
PopupSimpleGAMEWithSprite: function(SectionName: PChar; Sprite: PSprite; Zoom: Integer): Integer; cdecl;
PopupWithImprovementSprite: function(FileName, SectionName: PChar; Flags, Improvement, Zoom: Integer): Integer; cdecl;
ProcessOrdersGoTo: procedure(UnitIndex: Integer); cdecl;
ProcessUnit: function: Integer; cdecl;
PutDownUnit: procedure(UnitIndex, X, Y, MPSend: Integer); cdecl;
RectHeight: function(A1: PRect): Integer; cdecl;
RectWidth: function(A1: PRect): Integer; cdecl;
ResetSpriteZoom: procedure; cdecl;
ScaleByZoom: function(Value, Zoom: Integer): Integer; cdecl;
Scroll_CallRedrawAfter: procedure(This: PControlInfoScroll; Pos: Integer); stdcall;
Scroll_CreateControl: procedure(This: PControlInfoScroll; WindowInfo: PWindowInfo; Code: Integer; Rect: PRect; Vert: Boolean); stdcall;
Scroll_Ctr: function(This: PControlInfoScroll): PControlInfoScroll; stdcall;
Scroll_DestroyBar: procedure(This: PControlInfoScroll; Delete: Boolean); stdcall;
Scroll_InitControlRange: procedure(This: PControlInfoScroll; MinPos, MaxPos: Integer); stdcall;
Scroll_SetPageSize: procedure(This: PControlInfoScroll; PageSize: Integer); stdcall;
Scroll_SetPosition: procedure(This: PControlInfoScroll; Position: Integer); stdcall;
SetCurrFont: procedure(A1: PFontInfo); cdecl;
SetDIBColorTableFromPalette: procedure(DrawInfo: PDrawInfo; Palette: PPalette); cdecl;
SetFocus: function(HWnd: HWND): HWND; cdecl;
SetFontColorWithShadow: procedure(A1, A2, A3, A4: Integer); cdecl;
SetSpecialist: procedure(CityIndex, SpecialistIndex, Specialist: Integer); cdecl;
SetSpriteZoom: procedure(Zoom: Integer); cdecl;
SetWinRectCityWindow: procedure; cdecl;
SetWorker: procedure(CityIndex: Integer; Worker: Byte; Add: Boolean); cdecl;
ShowAdvisorAttitude: procedure(A1: Integer); cdecl;
ShowAdvisorCityStatus: procedure(CivIndex: Integer); cdecl;
ShowAdvisorDefenseMinister: procedure(A1: Integer); cdecl;
ShowAdvisorScience: procedure(CivIndex: Integer); cdecl;
ShowAdvisorTrade: procedure(A1: Integer); cdecl;
ShowAdvisorWonders: procedure(A1: Integer); cdecl;
ShowDialogForeignMinister: procedure(A1: Integer); cdecl;
ShowTaxRate: procedure(CivIndex: Integer); cdecl;
Sprite_ChangeColor: procedure(This: PSprite; FromColor, ToColor: Byte); stdcall;
Sprite_CopyToPortNC: function(This: PSprite; Rect: PRect; DrawPort: PDrawPort; Left, Top: Integer): PRect; stdcall;
Sprite_CopyToSprite: procedure(This, Sprite2: PSprite); stdcall;
Sprite_Dispose: procedure(This: PSprite); stdcall;
Sprite_ExtractB: procedure(This: PSprite; A2: PDrawPort; Color: Byte; XLeft, YTop, Width, Height: Integer); stdcall;
TileBg: function(Dst, Tile: PDrawPort; A3, A4, A5, A6, A7, A8: Integer): Integer; cdecl;
UnitCanMove: function(UnitIndex: Integer): Boolean; cdecl;
UpdateAdvisorCityStatus: procedure; cdecl;
UpdateCopyValidateAdvisor: procedure(AdvisorType: Integer); cdecl;
WindowInfo1_LoadMainIcon: procedure(This: PWindowInfo1; IconName: Word); stdcall;
WindowInfo1_RecreateBrush: procedure(This: PWindowInfo1; Color: Byte); stdcall;
WindowInfo1_RestoreWindow: procedure(This: PWindowInfo1); stdcall;
WindowInfo1_SetFocusAndBringToTop: procedure(This: PWindowInfo1); stdcall;
WindowProcs_SetWndProcChar: procedure(This: PWindowProcs; A2: Pointer); stdcall;
WindowProcs_SetWndProcKeyDown2: procedure(This: PWindowProcs; A2: Pointer); stdcall;
WriteCiv2Dat: procedure; cdecl;
txtStrcatInt: function(A1: Integer): PChar; cdecl;
txtStrcatLabelString: function(A1: Integer): PChar; cdecl;
