// This file is generated automatically. Do not change it.
AfterActiveUnitChanged: procedure(A1: Integer); cdecl;
ArrangeWindows: procedure; cdecl;
CalcCityGlobals: procedure(CityIndex: Integer; Calc: Boolean); cdecl;
CalcCityGlobalsTileRes: procedure(CityIndex, SpiralIndex, AddTotal: Integer); cdecl;
CallRedrawAfterScroll: procedure(This: PControlInfoScroll; Pos: Integer); stdcall;
CenterView: procedure(This: PMapWindow; X, Y: Integer); stdcall;
CityCitizenClicked: procedure(CitizenIndex: Integer); cdecl;
CityHasImprovement: function(CityIndex, Improvement: Integer): Boolean; cdecl;
CityWindowExit: procedure; cdecl;
CityWndProcClose: procedure; cdecl;
CitywinCityButtonChange: procedure(A1: Integer); cdecl;
CivHasTech: function(CivIndex, Tech: Integer): Boolean; cdecl;
Clamp: function(A1, Min, Max: Integer): Integer; cdecl;
ClearPopupActive: procedure; cdecl;
ControlInfoScroll_SetScrollPosition: procedure(This: PControlInfoScroll; Position: Integer); stdcall;
CopyToPort: procedure(Src, Dst: PDrawPort; XSrc, YSrc, XDst, YDst, Width, Height: Integer); cdecl;
CreateDialog: procedure(This: PDialogWindow); stdcall;
CreateScrollbar: procedure(This: PControlInfoScroll; WindowInfo: PWindowInfo; Code: Integer; Rect: PRect; Vert: Boolean); stdcall;
Crt_OperatorDelete: procedure(Ptr: Pointer); cdecl;
Crt_OperatorNew: function(Count: Cardinal): Pointer; cdecl;
DestroyScrollBar: procedure(This: PControlInfoScroll; Delete: Boolean); stdcall;
Distance: function(X1, Y1, X2, Y2: Integer): Integer; cdecl;
DlgParams_SetNumber: procedure(Index, Number: Integer); cdecl;
DlgParams_SetString: procedure(Index, ListIndex: Integer); cdecl;
Dlg_AddListboxItem: function(This: PDialogWindow; Text: PChar; Index, A4: Integer): PListboxItem; stdcall;
Dlg_CleanupHeap: function(This: PDialogWindow): PHeap; stdcall;
Dlg_CreateAndWait: function(This: PDialogWindow; Timeout: Integer): Integer; stdcall;
Dlg_DrawListboxItemTextPart: procedure(This: PDialogWindow; Text: PChar; XLeft, YTop, Selected, Disabled: Integer); stdcall;
Dlg_DrawTextLine: function(This: PDialogWindow; Text: PChar; XLeft, YTop, A5: Integer): Integer; stdcall;
Dlg_InitWithHeap: function(This: PDialogWindow; HeapAllocSize: Smallint): PDialogWindow; stdcall;
Dlg_LoadPopup: function(This: PDialogWindow; FileName, SectionName: PChar; Length: Integer; Text: PChar; A6: PGraphicsInfo; A3: PDrawPort; Rect: PRect; Flags: Integer): Integer; stdcall;
DrawCitySprite: procedure(This: PDrawPort; CityIndex, A3, XLeft, YTop, Zoom: Integer); cdecl;
DrawCityWindowBuilding: procedure(This: PCityWindow; CopyToScreen: Boolean); stdcall;
DrawCityWindowResources: procedure(This: PCityWindow; CopyToScreen: Boolean); stdcall;
DrawCityWindowSupport: procedure(This: PCityWindow; CopyToScreen: Boolean); stdcall;
DrawFrame: procedure(DrawPort: PDrawPort; Rect: PRect; Color: Integer); cdecl;
DrawPort_ResetWH: function(This: PDrawPort; Width, Height: Integer): Integer; stdcall;
DrawPort_UpdateDIBColorTableFromPaletteSafe: procedure(This: PDrawPort; Palette: PPalette); stdcall;
DrawStringCurrDrawPort2: function(Text: PChar; XLeft, YTop: Integer): Integer; cdecl;
DrawStringRightCurrDrawPort2: function(Text: PChar; XRight, YTop, OffsetX: Integer): Integer; cdecl;
DrawUnit: procedure(DrawPort: PDrawPort; UnitIndex, A3, Left, Top, Zoom, WithoutFortress: Integer); cdecl;
ExtractSprite64x48: procedure(Sprite: PSprite; XLeft, YTop: Integer); cdecl;
FontInfo_GetHeightWithExLeading: function(This: PFontInfo): Integer; stdcall;
FontInfo_GetTextExtentX: function(This: PFontInfo; Text: PChar): Integer; stdcall;
FontInfo_Recreate: procedure(This: PFontInfo; FontFaceNum, Height: Integer; Style: Byte); stdcall;
FontPrepare: procedure(Zoom: Integer); cdecl;
GetAdvanceCost: function(CivIndex: Integer): Integer; cdecl;
GetCityIndexAtXY: function(X, Y: Integer): Integer; cdecl;
GetCivColor1: function(CivIndex: Integer): Integer; cdecl;
GetInfoOfClickedCitySprite: function(This: PCitySpritesInfo; X, Y: Integer; var SIndex, SType: Integer): Integer; stdcall;
GetNextUnitInStack: function(UnitIndex: Integer): Integer; cdecl;
GetPixel: function(This: PDrawPort; X, Y: Integer): Integer; stdcall;
GetResourceInCityTile: function(CityIndex, SpiralIndex, ResIndex: Integer): Integer; cdecl;
GetSpecialist: function(CityIndex, SpecialistIndex: Integer): Integer; cdecl;
GetSpriteRatios: procedure(var Numerator, Denominator: Integer); cdecl;
GetStringInList: function(StringIndex: Integer): PChar; cdecl;
GetTopUnitInStack: function(UnitIndex: Integer): Integer; cdecl;
GetUpkeep: function(CivIndex, Improvement: Integer): Integer; cdecl;
GraphicsInfo_CopyToScreenAndValidateW: procedure(This: PGraphicsInfo); stdcall;
Heap_Add: function(Heap: PHeap; Size: Word): Pointer; cdecl;
HumanTurn: procedure; cdecl;
InitControlScrollRange: procedure(This: PControlInfoScroll; MinPos, MaxPos: Integer); stdcall;
InitNewGameParameters: procedure; cdecl;
IsInMapBounds: function(X, Y: Integer): Boolean; cdecl;
ListItemProcLButtonUp: procedure(Code: Integer); cdecl;
LoadMainIcon: procedure(This: PWindowInfo1; IconName: Word); stdcall;
MSInitGraf: function(Rect: PRect): PDrawInfo; cdecl;
MapGetCivData: function(X, Y, CivIndex: Integer): PByte; cdecl;
MapGetOwnership: function(X, Y: Integer): Integer; cdecl;
MapGetSquare: function(X, Y: Integer): PMapSquare; cdecl;
MapGetSquareCityRadii: function(X, Y: Integer): Integer; cdecl;
MapSquareIsVisibleTo: function(X, Y, CivIndex: Integer): Boolean; cdecl;
MapToWindow: procedure(This: PMapWindow; var WindowX, WindowY: Integer; MapX, MapY: Integer); stdcall;
MapUpdateKnownTerrainFeatures: procedure(X, Y, CivIndex: Integer); cdecl;
MapWrapX: function(X: Integer): Integer; cdecl;
MenuBar_AddMenu: function(This: PMenuBar; Num: Integer; Text: PChar): PMenu; stdcall;
MenuBar_AddSubMenu: function(This: PMenuBar; Num, SubNum: Integer; Text: PChar; Len: Integer): PMenu; stdcall;
MenuBar_GetSubMenu: function(This: PMenuBar; Num: Integer): PMenu; stdcall;
PFFindConnection: function(CivIndex, X1, Y1, X2, Y2: Integer): Integer; cdecl;
PFFindUnitDir: function(UnitIndex: Integer): Integer; cdecl;
PFMove: function(X, Y, A3: Integer): Integer; cdecl;
Palette_SetRandomID: procedure(This: PPalette); stdcall;
PopupSimpleGameMessage: function(SectionName: PChar; Sprite: PSprite; Zoom: Integer): Integer; cdecl;
ProcessOrdersGoTo: procedure(UnitIndex: Integer); cdecl;
ProcessUnit: function: Integer; cdecl;
RedrawMap: procedure(This: PMapWindow; CivIndex: Integer; CopyToScreen: Boolean); stdcall;
ResetSpriteZoom: procedure; cdecl;
ScaleByZoom: function(Value, Zoom: Integer): Integer; cdecl;
ScaleWithCityWindowSize: function(This: PCityWindow; Value: Integer): Integer; stdcall;
ScreenToMap: function(This: PMapWindow; var MapX, MapY: Integer; ScreenX, ScreenY: Smallint): Boolean; stdcall;
Scroll_Ctr: function(This: PControlInfoScroll): PControlInfoScroll; stdcall;
SetCurrFont: procedure(A1: PFontInfo); cdecl;
SetDIBColorTableFromPalette: procedure(DrawInfo: PDrawInfo; Palette: PPalette); cdecl;
SetFontColorWithShadow: procedure(A1, A2, A3, A4: Integer); cdecl;
SetScrollPageSize: procedure(This: PControlInfoScroll; PageSize: Integer); stdcall;
SetSpecialist: procedure(CityIndex, SpecialistIndex, Specialist: Integer); cdecl;
SetSpriteZoom: procedure(Zoom: Integer); cdecl;
SetWinRectCityWindow: procedure; cdecl;
SetWorker: procedure(CityIndex: Integer; Worker: Byte; Add: Boolean); cdecl;
ShowCityWindow: procedure(This: PCityWindow; CityIndex: Integer); stdcall;
ShowWindowInvalidateRect: procedure(This: PControlInfo); stdcall;
Sprite_CopyToPortNC: function(This: PSprite; Rect: PRect; DrawPort: PDrawPort; Left, Top: Integer): PRect; stdcall;
Sprite_CopyToSprite: procedure(This, Sprite2: PSprite); stdcall;
Sprite_Dispose: procedure(This: PSprite); stdcall;
TileBg: function(Dst, Tile: PDrawPort; A3, A4, A5, A6, A7, A8: Integer): Integer; cdecl;
UnitCanMove: function(UnitIndex: Integer): Boolean; cdecl;
UpdateAdvisorCityStatus: procedure; cdecl;
UpdateCityWindow: procedure(This: PCityWindow; A2: Integer); stdcall;
UpdateCopyValidateAdvisor: procedure(AdvisorType: Integer); cdecl;
WindowInfo1_RecreateBrush: procedure(This: PWindowInfo1; Color: Byte); stdcall;
WindowInfo1_RestoreWindow: procedure(This: PWindowInfo1); stdcall;
WindowInfo1_SetFocusAndBringToTop: procedure(This: PWindowInfo1); stdcall;
txtStrcatInt: function(A1: Integer): PChar; cdecl;
txtStrcatLabelString: function(A1: Integer): PChar; cdecl;
