    AfterActiveUnitChanged: procedure(A1: Integer); cdecl;
    ArrangeWindows: procedure(); cdecl;
    CalcCityGlobals: function(CityIndex: Integer; Calc: LongBool): Integer; cdecl;
    CalcCityGlobalsTileRes: procedure(CityIndex, SpiralIndex, AddTotal: Integer); cdecl;
    CallRedrawAfterScroll: procedure(ControlInfoScroll: PControlInfoScroll; Pos: Integer); stdcall;
    CenterView: procedure(MapWindow: PMapWindow; X, Y: Integer); stdcall;
    CityCitizenClicked: procedure(CitizenIndex: Integer); cdecl;
    CityHasImprovement: function(CityIndex, Improvement: Integer): LongBool; cdecl;
    CityWindowExit: procedure; cdecl;
    CityWndProcClose: procedure; cdecl;
    CitywinCityButtonChange: procedure(A1: Integer); cdecl;
    CivHasTech: function(CivIndex, Tech: Integer): LongBool; cdecl;
    Clamp: function(A1, AMin, AMax: Integer): Integer; cdecl;
    ClearPopupActive: procedure; cdecl;
    ControlInfoScroll_SetScrollPosition: procedure(ControlInfoScroll: PControlInfoScroll; Position: Integer); stdcall;
    CopyToPort: procedure(Src, Dst: PDrawPort; A3, A4, A5, A6, A7, A8: Integer); cdecl;
    CreateDialog: procedure(Dialog: PDialogWindow); stdcall;
    CreateScrollbar: function(ControlInfoScroll: PControlInfoScroll; WindowInfo: PWindowInfo; Code: Integer; Rect: PRect; Flag: Integer): PControlInfoScroll; stdcall;
    Crt_OperatorDelete: procedure(A1: Pointer); cdecl;
    Crt_OperatorNew: function(Size: Integer): Pointer; cdecl;
    DestroyScrollBar: procedure(ControlInfoScroll: PControlInfoScroll; Flag: LongBool); stdcall;
    Distance: function(X1, Y1, X2, Y2: Integer): Integer; cdecl;
    DlgParams_SetNumber: procedure(NumberIndex, Value: Integer); cdecl;
    DlgParams_SetString: procedure(Index, ListIndex: Integer); cdecl;    
    Dlg_AddListboxItem: function(Dialog: PDialogWindow; Text: PChar; Index: Integer; a4: Integer): PListboxItem; stdcall;
    Dlg_CleanupHeap: function(Dialog: PDialogWindow): PHeap; stdcall;
    Dlg_CreateAndWait: function(Dialog: PDialogWindow; TimeOut: Integer): Integer; stdcall;
    Dlg_DrawListboxItemTextPart: procedure(A1: PDialogWindow; A2: PChar; A3, A4, A5, A6: Integer); stdcall;
    Dlg_DrawTextLine: procedure(Dialog: PDialogWindow; Text: PChar; X, Y, A5: Integer); stdcall;
    Dlg_InitWithHeap: function(Dialog: PDialogWindow; HeapAllocSize: Integer): PDialogWindow; stdcall;
    Dlg_LoadPopup: function(Dialog: PDialogWindow; FileName: PChar; SectionName: PChar; Length: Integer; Text: PChar; a6: PGraphicsInfo; a3: PDrawPort; aRect: PRect; Flags: Integer): Integer; stdcall;
    DrawCitySprite: procedure(DrawPort: PDrawPort; CityIndex, A3, Left, Top, Zoom: Integer); cdecl;
    DrawCityWindowBuilding: procedure(CityWindow: PCityWindow; A2: Integer); stdcall;
    DrawCityWindowResources: procedure(CityWindow: PCityWindow; A2: Integer); stdcall;
    DrawCityWindowSupport: function(CityWindow: PCityWindow; Flag: LongBool): PCityWindow; stdcall;
    DrawFrame: procedure(DrawPort: PDrawPort; Rect: PRect; Color: Integer); cdecl;
    DrawPort_ResetWH: function(DrawPort: PDrawPort; Width, Height: Integer): Integer; stdcall;
    DrawPort_UpdateDIBColorTableFromPaletteSafe: procedure(ThisDrawPort: PDrawPort; Palette: Pointer); stdcall;
    DrawStringCurrDrawPort2: function(ChText: PChar; Left, Top: Integer): Integer; cdecl;
    DrawStringRightCurrDrawPort2: procedure(ChText: PChar; Right, Top, Shift: Integer); cdecl;
    DrawUnit: function(DrawPort: PDrawPort; UnitIndex, A3, Left, Top, Zoom, WithoutFortress: Integer): Integer; cdecl;
    ExtractSprite64x48: procedure(Sprite: PSprite; Left, Top: Integer); cdecl;
    FontInfo_GetHeightWithExLeading: function(This: PFontInfo): Integer; stdcall;
    FontInfo_GetTextExtentX: function(This: PFontInfo; A2: PChar): Integer; stdcall;
    FontInfo_Recreate: procedure(FontInfo: PFontInfo; FontFaceNum, Height: Integer; Style: Byte); stdcall;
    FontPrepare: procedure(Zoom: Integer); cdecl;
    GetAdvanceCost: function(CivIndex: Integer): Integer; cdecl;
    GetCityIndexAtXY: function(X, Y: Integer): Integer; cdecl;
    GetCivColor1: function(CivIndex: Integer): Integer; cdecl;
    GetInfoOfClickedCitySprite: function(CitySpritesInfo: PCitySpritesInfo; X, Y: Integer; var SIndex, SType: Integer): Integer; stdcall;
    GetNextUnitInStack: function(UnitIndex: Integer): Integer; cdecl;
    GetPixel: function(DrawPort: PDrawPort; X, Y: Integer): Integer; stdcall;
    GetResourceInCityTile: function(CityIndex, SpiralIndex, ResIndex: Integer): Integer; cdecl;
    GetSpecialist: function(City, SpecialistIndex: Integer): Integer; cdecl;
    GetSpriteRatios: procedure(var Numerator, Denominator: Integer); cdecl;
    GetStringInList: function(StringIndex: Integer): PChar; cdecl;
    GetTopUnitInStack: function(UnitIndex: Integer): Integer; cdecl;
    GetUpkeep: function(CivIndex, Improvement: Integer): Integer; cdecl;
    GraphicsInfo_CopyToScreenAndValidateW: procedure(This: PGraphicsInfo); stdcall;
    Heap_Add: function(Heap: PHeap; Size: Integer): Pointer; cdecl;
    HumanTurn: function: Integer; cdecl;
    InitControlScrollRange: procedure(ControlInfoScroll: PControlInfoScroll; MinPos, MaxPos: Integer); stdcall;
    InitNewGameParameters: procedure(); cdecl;
    IsInMapBounds: function(X, Y: Integer): LongBool; cdecl;
    ListItemProcLButtonUp: procedure(Code: Integer); cdecl;
    LoadMainIcon: procedure(WindowInfo1: PWindowInfo1; IconName: Integer); stdcall;
    MSInitGraf: function(A1: PRect): PDrawInfo; cdecl;
    MapGetCivData: function(X, Y, CivIndex: Integer): PByte; cdecl;
    MapGetOwnership: function(X, Y: Integer): Integer; cdecl;
    MapGetSquare: function(X, Y: Integer): PMapSquare; cdecl;
    MapGetSquareCityRadii: function(X, Y: Integer): Integer; cdecl;
    MapSquareIsVisibleTo: function(X, Y, CivIndex: Integer): LongBool; cdecl;
    MapToWindow: procedure(MapWindow: PMapWindow; var WindowX, WindowY: Integer; MapX, MapY: Integer); stdcall;
    MapUpdateKnownTerrainFeatures: procedure(X, Y, CivIndex: Integer); cdecl;
    MapWrapX: function(X: Integer): Integer; cdecl;
    MenuBar_AddMenu: function(MenuBar: PMenuBar; Num: Integer; Text: PChar): PMenu; stdcall;
    MenuBar_AddSubMenu: function(MenuBar: PMenuBar; Num, SubNum: Integer; Text: PChar; Len: Integer): PMenu; stdcall;
    MenuBar_GetSubMenu: function(MenuBar: PMenuBar; Num: Integer): PMenu; stdcall;
    PFFindConnection: function(CivIndex, X1, Y1, X2, Y2: Integer): Integer; cdecl;
    PFFindUnitDir: function(UnitIndex: Integer): Integer; cdecl;
    PFMove: function(X, Y, A3: Integer): Integer; cdecl;
    Palette_SetRandomID: procedure(Palette: Pointer); stdcall;
    PopupSimpleGameMessage: procedure(A1, A2, A3: Integer); cdecl;
    ProcessOrdersGoTo: procedure(UnitIndex: Integer); cdecl;
    ProcessUnit: function: Integer; cdecl;
    RedrawMap: procedure(MapWindow: PMapWindow; CivIndex: Integer; CopyToScreen: LongBool); stdcall;
    ResetSpriteZoom: procedure(); cdecl;
    ScaleByZoom: function(Value, Zoom: Integer): Integer; cdecl;
    ScaleWithCityWindowSize: function(CityWindow: PCityWindow; A1: Integer): Integer; stdcall;
    ScreenToMap: function(MapWindow: PMapWindow; var MapX, MapY: Integer; ScreenX, ScreenY: Integer): LongBool; stdcall;
    Scroll_Ctr: function(ControlInfoScroll: PControlInfoScroll): PControlInfoScroll; stdcall;
    SetCurrFont: procedure(A1: PFontInfo); cdecl;
    SetDIBColorTableFromPalette: procedure(DrawInfo: PDrawInfo; Palette: Pointer); cdecl;
    SetFontColorWithShadow: procedure(A1, A2, A3, A4: Integer); cdecl;
    SetScrollPageSize: procedure(ControlInfoScroll: PControlInfoScroll; PageSize: Integer); stdcall;
    SetSpecialist: procedure(City, SpecialistIndex, Specialist: Integer); cdecl;
    SetSpriteZoom: procedure(AZoom: Integer); cdecl;
    SetWinRectCityWindow: procedure(); cdecl;
    SetWorker: procedure(CityIndex, Worker, Add: Integer); cdecl;
    ShowCityWindow: procedure(CityWindow: PCityWindow; CityIndex: Integer); stdcall;
    ShowWindowInvalidateRect: procedure(ControlInfo: PControlInfo); stdcall;
    Sprite_CopyToPortNC: function(This: PSprite; ARect: PRect; DrawPort: PDrawPort; X, Y: Integer): PRect; stdcall;
    Sprite_CopyToSprite: procedure(This, Target: PSprite); stdcall;
    Sprite_Dispose: procedure(This: PSprite); stdcall;
    TileBg: function(Dst, Tile: PDrawPort; A3, A4, A5, A6, A7, A8: Integer): Integer; cdecl;
    UnitCanMove: function(UnitIndex: Integer): LongBool; cdecl;
    UpdateAdvisorCityStatus: procedure(); cdecl;
    UpdateCityWindow: procedure(CityWindow: PCityWindow; A2: Integer); stdcall;
    UpdateCopyValidateAdvisor: procedure(A1: Integer); cdecl;
    WindowInfo1_RecreateBrush: procedure(WindowInfo1: PWindowInfo1; Color: Integer); stdcall;
    WindowInfo1_RestoreWindow: procedure(WindowInfo1: PWindowInfo1); stdcall;
    WindowInfo1_SetFocusAndBringToTop: procedure(WindowInfo1: PWindowInfo1); stdcall;
    txtStrcatInt: procedure(A1: Integer); cdecl;
    txtStrcatLabelString: procedure(A1: Integer); cdecl; // A1 + 0x11 = Line # in Labels.txt